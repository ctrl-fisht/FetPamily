// <auto-generated />
using System;
using System.Collections.Generic;
using FetPamily.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FetPamily.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250727125027_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FetPamily.Domain.Species.Entities.Breed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<Guid>("SpeciesId")
                        .HasColumnType("uuid")
                        .HasColumnName("species_id");

                    b.HasKey("Id");

                    b.HasIndex("SpeciesId");

                    b.ToTable("breeds", (string)null);
                });

            modelBuilder.Entity("FetPamily.Domain.Species.Entities.Species", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("species", (string)null);
                });

            modelBuilder.Entity("FetPamily.Domain.Volunteers.Entities.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dob");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<decimal>("Height")
                        .HasColumnType("numeric")
                        .HasColumnName("height");

                    b.Property<string>("HelpStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("help_status");

                    b.Property<bool>("IsNeutered")
                        .HasColumnType("boolean")
                        .HasColumnName("is_neutered");

                    b.Property<bool>("IsVaccinated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_vaccinated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("TreatmentStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("treatment_status");

                    b.Property<Guid>("VolunteerId")
                        .HasColumnType("uuid")
                        .HasColumnName("volunteer_id");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric")
                        .HasColumnName("weight");

                    b.ComplexProperty<Dictionary<string, object>>("Address", "FetPamily.Domain.Volunteers.Entities.Pet.Address#Address", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int?>("ApartmentNumber")
                                .HasColumnType("integer")
                                .HasColumnName("address_apartment_number");

                            b1.Property<string>("Building")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("address_building");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("address_city");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("address_street");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("PetInfo", "FetPamily.Domain.Volunteers.Entities.Pet.PetInfo#PetInfo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<Guid>("BreedId")
                                .HasColumnType("uuid")
                                .HasColumnName("info_breed_id");

                            b1.Property<string>("Color")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("info_color");

                            b1.Property<Guid>("SpeciesId")
                                .HasColumnType("uuid")
                                .HasColumnName("info_species_id");
                        });

                    b.HasKey("Id");

                    b.HasIndex("VolunteerId");

                    b.ToTable("pets", null, t =>
                        {
                            t.HasCheckConstraint("CK_pets_address_building", "\"address_building\" ~ '^[a-zA-ZА-Яа-яЁё0-9\\-]+$'");

                            t.HasCheckConstraint("CK_pets_address_city", "\"address_city\" ~ '^[a-zA-Zа-яА-ЯёЁ\\s\\-]+$'");

                            t.HasCheckConstraint("CK_pets_address_street", "\"address_street\" ~ '^[a-zA-ZА-Яа-яЁё0-9\\-\\. ]+$'");

                            t.HasCheckConstraint("CK_pets_dob", "\"dob\" <= CURRENT_DATE");

                            t.HasCheckConstraint("CK_pets_height", "\"height\" > 0 AND \"height\" <= 10000");

                            t.HasCheckConstraint("CK_pets_phone_number", "\"phone_number\" ~ '^\\+?\\d{1,15}$'");

                            t.HasCheckConstraint("CK_pets_weight", "\"weight\" > 0 AND \"weight\" <= 100");

                            t.HasCheckConstraint("address_apartment_number", "\"address_apartment_number\" IS NULL OR \"address_apartment_number\" > 0");
                        });
                });

            modelBuilder.Entity("FetPamily.Domain.Volunteers.Entities.Volunteer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)")
                        .HasColumnName("email");

                    b.Property<int>("Experience")
                        .HasColumnType("integer")
                        .HasColumnName("experience");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("full_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.HasKey("Id");

                    b.ToTable("volunteers", null, t =>
                        {
                            t.HasCheckConstraint("CK_volunteers_email", "\"email\" ~ '^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$'");

                            t.HasCheckConstraint("CK_volunteers_experience", "\"experience\" >= 0");

                            t.HasCheckConstraint("CK_volunteers_phone_number", "\"phone_number\" ~ '^\\+?\\d{1,15}$'");
                        });
                });

            modelBuilder.Entity("FetPamily.Domain.Species.Entities.Breed", b =>
                {
                    b.HasOne("FetPamily.Domain.Species.Entities.Species", "Species")
                        .WithMany("Breeds")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Species");
                });

            modelBuilder.Entity("FetPamily.Domain.Volunteers.Entities.Pet", b =>
                {
                    b.HasOne("FetPamily.Domain.Volunteers.Entities.Volunteer", "Volunteer")
                        .WithMany("Pets")
                        .HasForeignKey("VolunteerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FetPamily.Domain.Volunteers.PetsValueObjects.PaymentInfo", "PaymentInfo", b1 =>
                        {
                            b1.Property<Guid>("PetId")
                                .HasColumnType("uuid");

                            b1.HasKey("PetId");

                            b1.ToTable("pets");

                            b1.ToJson("payment_info");

                            b1.WithOwner()
                                .HasForeignKey("PetId");

                            b1.OwnsMany("FetPamily.Domain.Volunteers.PetsValueObjects.PaymentDetail", "PaymentDetails", b2 =>
                                {
                                    b2.Property<Guid>("PaymentInfoPetId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Description")
                                        .IsRequired()
                                        .HasMaxLength(500)
                                        .HasColumnType("character varying(500)")
                                        .HasColumnName("payment_description");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)")
                                        .HasColumnName("payment_name");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)")
                                        .HasColumnName("payment_value");

                                    b2.HasKey("PaymentInfoPetId", "Id");

                                    b2.ToTable("pets");

                                    b2.WithOwner()
                                        .HasForeignKey("PaymentInfoPetId");
                                });

                            b1.Navigation("PaymentDetails");
                        });

                    b.Navigation("PaymentInfo")
                        .IsRequired();

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("FetPamily.Domain.Volunteers.Entities.Volunteer", b =>
                {
                    b.OwnsOne("FetPamily.Domain.Volunteers.VolunteersValueObjects.VolunteerDetails", "VolunteerDetails", b1 =>
                        {
                            b1.Property<Guid>("VolunteerId")
                                .HasColumnType("uuid");

                            b1.HasKey("VolunteerId");

                            b1.ToTable("volunteers");

                            b1.ToJson("volunteer_details");

                            b1.WithOwner()
                                .HasForeignKey("VolunteerId");

                            b1.OwnsMany("FetPamily.Domain.Volunteers.VolunteersValueObjects.PaymentDetail", "PaymentDetails", b2 =>
                                {
                                    b2.Property<Guid>("VolunteerDetailsVolunteerId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Description")
                                        .IsRequired()
                                        .HasMaxLength(500)
                                        .HasColumnType("character varying(500)")
                                        .HasColumnName("payment_description");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)")
                                        .HasColumnName("payment_name");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("character varying(100)")
                                        .HasColumnName("payment_value");

                                    b2.HasKey("VolunteerDetailsVolunteerId", "Id");

                                    b2.ToTable("volunteers");

                                    b2.WithOwner()
                                        .HasForeignKey("VolunteerDetailsVolunteerId");
                                });

                            b1.OwnsMany("FetPamily.Domain.Volunteers.VolunteersValueObjects.SocialNetwork", "SocialNetworks", b2 =>
                                {
                                    b2.Property<Guid>("VolunteerDetailsVolunteerId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<string>("Link")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("soc_link");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("soc_name");

                                    b2.HasKey("VolunteerDetailsVolunteerId", "Id");

                                    b2.ToTable("volunteers");

                                    b2.WithOwner()
                                        .HasForeignKey("VolunteerDetailsVolunteerId");
                                });

                            b1.Navigation("PaymentDetails");

                            b1.Navigation("SocialNetworks");
                        });

                    b.Navigation("VolunteerDetails");
                });

            modelBuilder.Entity("FetPamily.Domain.Species.Entities.Species", b =>
                {
                    b.Navigation("Breeds");
                });

            modelBuilder.Entity("FetPamily.Domain.Volunteers.Entities.Volunteer", b =>
                {
                    b.Navigation("Pets");
                });
#pragma warning restore 612, 618
        }
    }
}
